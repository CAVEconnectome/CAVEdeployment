apiVersion: v1
kind: ConfigMap
metadata:
  name: auth-config-v${AUTHSERVICE_CONFIG_VERSION}
data:
  config.cfg: |
    import redis
    import os
    SECRET_KEY = "b${AUTHSERVICE_SECRET_KEY}"
    SESSION_TYPE = 'null'

    SQLALCHEMY_DATABASE_URI = "${SQL_DB_TYPE}://${POSTGRES_WRITE_USER}:${POSTGRES_WRITE_USER_PASSWORD}@localhost:5432/${SQL_AUTH_DB_NAME}"
    SQLALCHEMY_TRACK_MODIFICATIONS = False

    CORS_SUPPORTS_CREDENTIALS = True
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: auth-uwsgiconfig-v${AUTHSERVICE_CONFIG_VERSION}
data:
  uwsgi.ini: |
    [uwsgi]
    socket = /tmp/uwsgi.sock
    chown-socket = nginx:nginx
    chmod-socket = 664
    # Graceful shutdown on SIGTERM, see https://github.com/unbit/uwsgi/issues/849#issuecomment-118869386
    hook-master-start = unix_signal:15 gracefully_kill_them_all

    module = run
    callable = application

    uid = nginx
    gid = nginx

    env = HOME=/home/nginx
    show-config = true
    need-app = true
    die-on-term = true

    ### Worker scaling
    # maximum number of workers
    processes = 16

    # https://uwsgi-docs.readthedocs.io/en/latest/Cheaper.html#busyness-cheaper-algorithm
    cheaper-algo = busyness

    # Time window for tracking average busyness
    cheaper-overload = 20

    # Number of idle cycles before stopping a worker
    cheaper-busyness-multiplier = 3

    # Minimum number of workers
    cheaper = 2

    # Start with 2 workers
    cheaper-initial = 2

    # Spawn at most 2 workers at once
    cheaper-step = 2

    # Start spawning more workers at 60% busyness
    cheaper-busyness-max = 60

    # Start killing workers if busyness falls below 20%
    cheaper-busyness-min = 20


    ### Reloads and limitations
    # max socket listen queue length - requires net.somaxconn increase
    listen = 4096

    # Max request header size
    buffer-size = 4096

    # Don't spawn new workers if total memory over 750 MB
    cheaper-rss-limit-soft = 805306368
    cheaper-rss-limit-hard = 912680550

    # Reload worker after serving X requests
    max-requests = 5000

    # Grace period for single worker to reload/shutdown
    worker-reload-mercy = 600

    # Grace period for all workers and processes to reload/shutdown
    reload-mercy = 605

    # Kill stuck/unresponsive processes after 20 minutes
    harakiri = 1200


    ### Misc
    # Maintain Python thread support
    enable-threads = true

    # Required for cheaper-rss-limit-soft
    memory-report = true

    # Additional log output for harakiri
    harakiri-verbose = true


    ### Logging
    # Filter our properly pre-formated app messages and pass them through
    logger = app stdio
    log-route = app ^{.*"source":.*}$

    # Capture known / most common uWSGI messages
    logger = uWSGIdebug stdio
    logger = uWSGIwarn stdio

    log-route = uWSGIdebug ^{address space usage
    log-route = uWSGIwarn \[warn\]

    log-encoder = json:uWSGIdebug {"source":"uWSGI","time":"${strftime:%Y-%m-%dT%H:%M:%S.000Z}","severity":"debug","message":"${msg}"}
    log-encoder = nl:uWSGIdebug
    log-encoder = json:uWSGIwarn {"source":"uWSGI","time":"${strftime:%Y-%m-%dT%H:%M:%S.000Z}","severity":"warning","message":"${msg}"}
    log-encoder = nl:uWSGIwarn

    # Treat everything else as error message of unknown origin
    logger = unknown stdio

    # Creating our own "inverse Regex" using negative lookaheads, which makes this
    # log-route rather cryptic and slow... Unclear how to get a simple
    # "fall-through" behavior for non-matching messages, otherwise.
    log-route = unknown ^(?:(?!^{address space usage|\[warn\]|^{.*"source".*}$).)*$

    log-encoder = json:unknown {"source":"unknown","time":"${strftime:%Y-%m-%dT%H:%M:%S.000Z}","severity":"error","message":"${msg}"}
    log-encoder = nl:unknown
---
kind: Service
apiVersion: v1
metadata:
  name: auth-service
spec:
  type: NodePort
  sessionAffinity: ClientIP
  selector:
    app: auth
  ports:
    - port: 80
      targetPort: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth
spec:
  replicas: ${AUTH_REPLICAS}
  selector:
    matchLabels:
      app: auth
  template:
    metadata:
      labels:
        app: auth
    spec:
      volumes:
        - name: auth-uwsgi-volume
          configMap:
            name: auth-uwsgiconfig-v${AUTHSERVICE_CONFIG_VERSION}
        - name: auth-client-secret-volume
          secret:
            secretName: ${AUTH_SERVICE_ACCOUNT_SECRET}
        - name: auth-oauth-secret-volume
          secret:
            secretName: ${AUTH_OAUTH_SECRET}
        - name: cloudsql-instance-credentials-volume
          secret:
            secretName: ${CLOUD_SQL_SERVICE_ACCOUNT_SECRET}
        - name: authservice-config-volume
          configMap:
            name: auth-config-v${AUTHSERVICE_CONFIG_VERSION}
      containers:
        - name: auth
          image: ${DOCKER_REPOSITORY}/neuroglancer_auth:v${AUTH_VERSION}
          imagePullPolicy: Always
          ports:
            - containerPort: 80
          volumeMounts:
            - name: auth-client-secret-volume
              mountPath: /app/authclientsecret/instance/
            - name: auth-oauth-secret-volume
              mountPath: /app/oauthsecret/instance/
            - name: authservice-config-volume
              mountPath: /app/config/
            - name: auth-uwsgi-volume
              mountPath: /etc/uwsgi
          env:
            - name: OAUTH_CLIENT_SECRET
              value: /app/authclientsecret/instance/${GOOGLE_SECRET_FILENAME}
            - name: AUTH_OAUTH_SECRET
              value: /app/oauthsecret/instance/${OAUTH_SECRET_FILENAME}
            - name: REDISHOST
              value: ${REDIS_IP}
            - name: STICKY_AUTH_URL
              value: ${STICKY_AUTH_URL}
            - name: AUTH_URL
              value: ${AUTH_URL}
            - name: AUTH_USE_REDIS
              value: "true"
            - name: AUTH_CONFIG_SETTINGS
              value: /app/config/config.cfg
            - name: AUTH_USE_REDIS
              value: "true"
            - name: URL_PREFIX
              value: "auth"
          resources:
            requests:
              memory: 900Mi
              cpu: 85m
          readinessProbe:
            httpGet:
              path: /auth/version
              port: 80
            initialDelaySeconds: 5
            timeoutSeconds: 1
            periodSeconds: 60
          livenessProbe:
            httpGet:
              path: /auth/version
              port: 80
            initialDelaySeconds: 15
            timeoutSeconds: 1
            periodSeconds: 60
        - name: cloudsql-proxy
          image: gcr.io/cloudsql-docker/gce-proxy:1.11
          command:
            [
              "/cloud_sql_proxy",
              "-instances=${PROJECT_NAME}:${REGION}:${SQL_INSTANCE_NAME}=tcp:5432",
              "-credential_file=/secrets/cloudsql/${GOOGLE_SECRET_FILENAME}",
            ]
          resources:
            requests:
              memory: 15Mi
              cpu: 10m
          securityContext:
            runAsUser: 2 # non-root user
            allowPrivilegeEscalation: false
          volumeMounts:
            - name: cloudsql-instance-credentials-volume
              mountPath: /secrets/cloudsql
              readOnly: true
        - name: sysctl-buddy
          image: alpine:3.4
          command:
            - /bin/sh
            - -c
            - |
              while true; do
                sysctl -w net.core.somaxconn=32768
                sysctl -w net.ipv4.ip_local_port_range='1024 65535'
                sleep 10
              done
          imagePullPolicy: IfNotPresent
          securityContext:
            privileged: true
          resources:
            requests:
              memory: 10Mi
              cpu: 5m
