apiVersion: v1
kind: ConfigMap
metadata:
  name: materializationengine-config-v${MATERIALIZE_CONFIG_VERSION}
  namespace: default
data:
  config.cfg: |
    import os
    import json
    import logging
    # Statement for enabling the development environment
    INFOSERVICE_ENDPOINT = "https://${INFO_URL}"
    SCHEMA_SERVICE_ENDPOINT = "https://${GLOBAL_SERVER}/schema/"
    GLOBAL_SERVER_URL = "https://${GLOBAL_SERVER}"
    LOCAL_SERVER_URL = "https://${ENVIRONMENT}.${DOMAIN_NAME}"
    TESTING = False
    LOGGING_FORMAT = '%(asctime)s - %(levelname)s - %(message)s'
    LOGGING_LOCATION = '/home/nginx/.materializationengine/bookshelf.log'
    SQLALCHEMY_DATABASE_URI = "${SQL_DB_TYPE}://${POSTGRES_WRITE_USER}:${POSTGRES_WRITE_USER_PASSWORD}@127.0.0.1:3306/${SQL_ANNO_DB_NAME}"
    SQL_INSTANCE_NAME = "${SQL_INSTANCE_NAME}"
    MATERIALIZATION_DUMP_BUCKET = "gs://${MATERIALIZATION_DUMP_BUCKET_NAME}"
    REDIS_HOST = "${MAT_REDIS_HOST}"
    REDIS_PORT = "${MAT_REDIS_PORT}"
    REDIS_PASSWORD = "${MAT_REDIS_PASSWORD}"
    REDIS_URL = "redis://:${MAT_REDIS_PASSWORD}@${MAT_REDIS_HOST}:${MAT_REDIS_PORT}/0"
    CELERY_BROKER_URL = REDIS_URL
    CELERY_RESULT_BACKEND = CELERY_BROKER_URL
    MATERIALIZATION_ROW_CHUNK_SIZE = 500
    TEST_DB_NAME = "${MAT_HEALTH_ALIGNED_VOLUME_NAME}"
    INFO_API_VERSION = 2
    DATASTACKS = ["${MAT_DATASTACKS}"]
    DAYS_TO_EXPIRE = 7
    LTS_DAYS_TO_EXPIRE = 30
    # database number config
    MIN_DATABASES = ${MIN_DATABASES}
    MAX_DATABASES = ${MAX_DATABASES}    
    # celery throttling settings
    QUERY_LIMIT_SIZE = ${MAT_QUERY_LIMIT_SIZE}
    QUEUE_LENGTH_LIMIT = 5000
    QUEUES_TO_THROTTLE = ["process"]
    THROTTLE_QUEUES = True
    MERGE_TABLES=${MERGE_MATERIALIZE_DATABASES}  
    LOGGING_LEVEL = logging.WARNING
    if os.environ.get("DAF_CREDENTIALS", None) is not None:
        with open(os.environ.get("DAF_CREDENTIALS"), "r") as f:
            AUTH_TOKEN = json.load(f)["token"]
    else:
        AUTH_TOKEN = ""

    BEAT_SCHEDULES = ${MAT_BEAT_SCHEDULES}
    AUTH_SHARED_EXCLUDED_GROUPS=[${ANNOTATION_EXCLUDED_PERMISSION_GROUPS}]
    DB_CONNECTION_POOL_SIZE = 1
    DB_CONNECTION_MAX_OVERFLOW = 9
    CELERY_CLOUDVOLUME_CACHE_BYTES = "1e8"
    MATERIALIZATION_UPLOAD_BUCKET_PATH = "${MATERIALIZATION_UPLOAD_BUCKET_PATH}"

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: materialize-scaler
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: materialize
  minReplicas: ${MAT_MIN_REPLICAS}
  maxReplicas: ${MAT_MAX_REPLICAS}
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 75
    - type: Pods
      pods:
        metric:
          name: custom.googleapis.com|http|uwsgi_perc_busy_workers
        target:
          type: AverageValue
          averageValue: 75
---
apiVersion: v1
kind: Service
metadata:
  name: materialize-service
spec:
  type: NodePort
  selector:
    app: materialize
  ports:
    - port: 80
      targetPort: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: materialize
spec:
  selector:
    matchLabels:
      app: materialize
  template:
    metadata:
      labels:
        app: materialize
    spec:
      tolerations:
        - key: "pool"
          operator: "Equal"
          value: "${LIGHTWEIGHT_POOL}"
          effect: "NoSchedule"
      nodeSelector:
        cloud.google.com/gke-nodepool: ${LIGHTWEIGHT_POOL}
      volumes:
        - name: materializationengine-config-volume
          configMap:
            name: materializationengine-config-v${MATERIALIZE_CONFIG_VERSION}
        - name: google-cloud-key
          secret:
            secretName: ${PYCG_SERVICE_ACCOUNT_SECRET}
        - name: cloudsql-instance-credentials-volume
          secret:
            secretName: ${CLOUD_SQL_SERVICE_ACCOUNT_SECRET}
      containers:
        - name: materialize
          image: ${DOCKER_REPOSITORY}/materializationengine:v${MATERIALIZE_VERSION}
          imagePullPolicy: Always
          ports:
            - containerPort: 80
            - containerPort: 9192
          volumeMounts:
            - name: google-cloud-key
              mountPath: /home/nginx/.cloudvolume/secrets
            - name: materializationengine-config-volume
              mountPath: /app/materializationengine/instance/
          env:
            - name: MATERIALIZATION_ENGINE_SETTINGS
              value: /app/materializationengine/instance/config.cfg
            - name: GOOGLE_APPLICATION_CREDENTIALS
              value: /home/nginx/.cloudvolume/secrets/${GOOGLE_SECRET_FILENAME}
            - name: LOCAL_SERVER_URL
              value: "http://pychunkedgraph-read-service"
            - name: AUTH_URI
              value: ${AUTH_URI}
            - name: LIMITER_CATEGORIES
              value: '${MAT_LIMITER_CATEGORIES}'
            - name: LIMITER_URI
              value: ${LIMITER_URI}
            - name: STICKY_AUTH_URL
              value: ${STICKY_AUTH_URL}
            - name: AUTH_URL
              value: ${AUTH_URL}
            - name: INFO_URL
              value: ${INFO_URL}
            - name: DAF_CREDENTIALS
              value: /home/nginx/.cloudvolume/secrets/${CAVE_SECRET_FILENAME}
            - name: QUEUE_LENGTH_LIMIT
              value: "5000"
            - name: QUEUES_TO_THROTTLE
              value: process
            - name: THROTTLE_QUEUES
              value: "true"
            - name: REDIS_HOST
              value: "${MAT_REDIS_HOST}"
            - name: REDIS_PORT
              value: "${MAT_REDIS_PORT}"
            - name: REDIS_PASSWORD
              value: "${MAT_REDIS_PASSWORD}" 
            - name: CELERY_CLOUDVOLUME_CACHE_BYTES
              value: "100000000" 
          resources:
            requests:
              memory: 850Mi
              cpu: 200m
          readinessProbe:
            httpGet:
              path: /health
              port: 80
            initialDelaySeconds: 5
            timeoutSeconds: 1
            periodSeconds: 60
          livenessProbe:
            httpGet:
              path: /health
              port: 80
            initialDelaySeconds: 15
            timeoutSeconds: 1
            periodSeconds: 60
        - name: uwsgi-exporter
          image: caveconnectome/uwsgi-export-workers:v14
          # Exposes the metrics endpoint on 0.0.0.0:9101
          ports:
              - containerPort: 9101
          env:
          # This tells the exporter where to find the uWSGI stats server
          - name: UWSGI_STATS_URL
            value: "http://localhost:9192"
          readinessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 5
        - name: prometheus-to-sd
          image: gcr.io/google-containers/prometheus-to-sd:v0.8.0
          command: ["/monitor"]
          args:
            - --source=http://localhost:9101/metrics
            - --stackdriver-prefix=custom.googleapis.com
            - --pod-id=$(POD_ID)
            - --namespace-id=$(POD_NAMESPACE)
          env:
            # save Kubernetes metadata as environment variables for use in metrics
            - name: POD_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.uid
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace        
        - name: cloudsql-proxy
          image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.15.2
          args:
            # Set the --max-connections flag to 50
            - "--port=3306"
            - "--credentials-file=/secrets/cloudsql/${GOOGLE_SECRET_FILENAME}"
            - "${PROJECT_NAME}:${REGION}:${SQL_INSTANCE_NAME}"
          resources:
            requests:
              memory: 8Mi
              cpu: 10m
          securityContext:
            runAsUser: 2 # non-root user
            allowPrivilegeEscalation: false
          # Replace <DB_PORT> with the port that the proxy should open
          # to listen for database connections from the application
          env:
          - name: CSQL_PROXY_PORT
            value: "3306"
          # If connecting from a VPC-native GKE cluster, you can use the
          # following flag to have the proxy connect over private IP
          # - name: CSQL_PROXY_PRIVATE_IP
          #   value: "true"

          # Enable HTTP healthchecks on port 9801. This enables /liveness,
          # /readiness and /startup health check endpoints. Allow connections
          # listen for connections on any interface (0.0.0.0) so that the
          # k8s management components can reach these endpoints.
          - name: CSQL_PROXY_HEALTH_CHECK
            value: "true"
          - name: CSQL_PROXY_HTTP_PORT
            value: "9801"
          - name: CSQL_PROXY_HTTP_ADDRESS
            value: 0.0.0.0

          # Configure the proxy to exit gracefully when sent a k8s configuration
          # file.
          - name: CSQL_PROXY_EXIT_ZERO_ON_SIGTERM
            value: "true"

          # Enable the admin api server (which only listens for local connections)
          # and enable the /quitquitquit endpoint. This allows other pods
          # to shut down the proxy gracefully when they are ready to exit.
          - name: CSQL_PROXY_QUITQUITQUIT
            value: "true"
          - name: CSQL_PROXY_ADMIN_PORT
            value: "9092"

          # Enable structured logging with LogEntry format
          - name: CSQL_PROXY_STRUCTURED_LOGS
            value: "true"

          # The /startup probe returns OK when the proxy is ready to receive
          # connections from the application. In this example, k8s will check
          # once a second for 60 seconds.
          #
          # We strongly recommend adding a startup probe to the proxy sidecar
          # container. This will ensure that service traffic will be routed to
          # the pod only after the proxy has successfully started.
          startupProbe:
            failureThreshold: 60
            httpGet:
              path: /startup
              port: 9801
              scheme: HTTP
            periodSeconds: 1
            successThreshold: 1
            timeoutSeconds: 10
          # The /liveness probe returns OK as soon as the proxy application has
          # begun its startup process and continues to return OK until the
          # process stops.
          #
          # We recommend adding a liveness probe to the proxy sidecar container.
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /liveness
              port: 9801
              scheme: HTTP
            # The probe will be checked every 10 seconds.
            periodSeconds: 10
            # Number of times the probe is allowed to fail before the transition
            # from healthy to failure state.
            #
            # If periodSeconds = 60, 5 tries will result in five minutes of
            # checks. The proxy starts to refresh a certificate five minutes
            # before its expiration. If those five minutes lapse without a
            # successful refresh, the liveness probe will fail and the pod will be
            # restarted.
            successThreshold: 1
            # The probe will fail if it does not respond in 10 seconds
            timeoutSeconds: 10
          readinessProbe:
            # The /readiness probe returns OK when the proxy can establish
            # a new connections to its databases.
            #
            # Please use the readiness probe to the proxy sidecar with caution.
            # An improperly configured readiness probe can cause unnecessary
            # interruption to the application. See README.md for more detail.
            httpGet:
              path: /readiness
              port: 9801
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 10
            # Number of times the probe must report success to transition from failure to healthy state.
            # Defaults to 1 for readiness probe.
            successThreshold: 1
            failureThreshold: 6

          # Declare the HTTP Port so that k8s components can reach the
          # metrics and health check endpoints.
          ports:
          - containerPort: 9801
            protocol: TCP
          lifecycle:
            preStop:
              httpGet:
                path: /quitquitquit
                port: 9092
                scheme: HTTP
          volumeMounts:
            - name: cloudsql-instance-credentials-volume
              mountPath: /secrets/cloudsql
              readOnly: true
      restartPolicy: Always
