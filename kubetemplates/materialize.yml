apiVersion: v1
kind: ConfigMap
metadata:
  name: materializationengine-config-v${MATERIALIZE_CONFIG_VERSION}
  namespace: default
data:
  config.cfg: |
    import os
    import json
    import logging
    # Statement for enabling the development environment
    INFOSERVICE_ENDPOINT = "https://${INFO_URL}"
    SCHEMA_SERVICE_ENDPOINT = "https://${GLOBAL_SERVER}/schema/"
    GLOBAL_SERVER_URL = "https://${GLOBAL_SERVER}"
    LOCAL_SERVER_URL = "https://${ENVIRONMENT}.${DOMAIN_NAME}"
    TESTING = False
    LOGGING_FORMAT = '%(asctime)s - %(levelname)s - %(message)s'
    LOGGING_LOCATION = '/home/nginx/.materializationengine/bookshelf.log'
    SQLALCHEMY_DATABASE_URI = "${SQL_DB_TYPE}://${POSTGRES_WRITE_USER}:${POSTGRES_WRITE_USER_PASSWORD}@127.0.0.1:3306/${SQL_ANNO_DB_NAME}"
    SQL_INSTANCE_NAME = "${SQL_INSTANCE_NAME}"
    MATERIALIZATION_DUMP_BUCKET = "gs://${MATERIALIZATION_DUMP_BUCKET_NAME}"
    REDIS_HOST = "${MAT_REDIS_HOST}"
    REDIS_PORT = "${MAT_REDIS_PORT}"
    REDIS_PASSWORD = "${MAT_REDIS_PASSWORD}"
    REDIS_URL = "redis://:${MAT_REDIS_PASSWORD}@${MAT_REDIS_HOST}:${MAT_REDIS_PORT}/0"
    CELERY_BROKER_URL = REDIS_URL
    CELERY_RESULT_BACKEND = CELERY_BROKER_URL
    MATERIALIZATION_ROW_CHUNK_SIZE = 500
    TEST_DB_NAME = "${MAT_HEALTH_ALIGNED_VOLUME_NAME}"
    INFO_API_VERSION = 2
    DATASTACKS = ["${MAT_DATASTACKS}"]
    DAYS_TO_EXPIRE = 7
    LTS_DAYS_TO_EXPIRE = 30
    # database number config
    MIN_DATABASES = ${MIN_DATABASES}
    MAX_DATABASES = ${MAX_DATABASES}    
    # celery throttling settings
    QUERY_LIMIT_SIZE = 500000
    QUEUE_LENGTH_LIMIT = 10000
    QUEUES_TO_THROTTLE = ["process"]
    THROTTLE_QUEUES = True
    MERGE_TABLES=${MERGE_MATERIALIZE_DATABASES}  
    LOGGING_LEVEL = logging.DEBUG
    if os.environ.get("DAF_CREDENTIALS", None) is not None:
        with open(os.environ.get("DAF_CREDENTIALS"), "r") as f:
            AUTH_TOKEN = json.load(f)["token"]
    else:
        AUTH_TOKEN = ""

    BEAT_SCHEDULES = ${MAT_BEAT_SCHEDULES}
    AUTH_SHARED_EXCLUDED_GROUPS=[${ANNOTATION_EXCLUDED_PERMISSION_GROUPS}]
    DB_CONNECTION_POOL_SIZE = 1
    DB_CONNECTION_MAX_OVERFLOW = 9
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: materialize-scaler
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: materialize
  minReplicas: ${MAT_MIN_REPLICAS}
  maxReplicas: ${MAT_MAX_REPLICAS}
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 75
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 75
---
apiVersion: v1
kind: Service
metadata:
  name: materialize-service
spec:
  type: NodePort
  selector:
    app: materialize
  ports:
    - port: 80
      targetPort: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: materialize
spec:
  selector:
    matchLabels:
      app: materialize
  template:
    metadata:
      labels:
        app: materialize
    spec:
      tolerations:
        - key: "pool"
          operator: "Equal"
          value: "${LIGHTWEIGHT_POOL}"
          effect: "NoSchedule"
      nodeSelector:
        cloud.google.com/gke-nodepool: ${LIGHTWEIGHT_POOL}
      volumes:
        - name: materializationengine-config-volume
          configMap:
            name: materializationengine-config-v${MATERIALIZE_CONFIG_VERSION}
        - name: google-cloud-key
          secret:
            secretName: ${PYCG_SERVICE_ACCOUNT_SECRET}
        - name: cloudsql-instance-credentials-volume
          secret:
            secretName: ${CLOUD_SQL_SERVICE_ACCOUNT_SECRET}
      containers:
        - name: materialize
          image: ${DOCKER_REPOSITORY}/materializationengine:v${MATERIALIZE_VERSION}
          imagePullPolicy: Always
          ports:
            - containerPort: 80
          volumeMounts:
            - name: google-cloud-key
              mountPath: /home/nginx/.cloudvolume/secrets
            - name: materializationengine-config-volume
              mountPath: /app/materializationengine/instance/
          env:
            - name: MATERIALIZATION_ENGINE_SETTINGS
              value: /app/materializationengine/instance/config.cfg
            - name: GOOGLE_APPLICATION_CREDENTIALS
              value: /home/nginx/.cloudvolume/secrets/${GOOGLE_SECRET_FILENAME}
            - name: LOCAL_SERVER_URL
              value: "http://pychunkedgraph-read-service"
            - name: AUTH_URI
              value: ${AUTH_URI}
            - name: LIMITER_CATEGORIES
              value: '${MAT_LIMITER_CATEGORIES}'
            - name: LIMITER_URI
              value: ${LIMITER_URI}
            - name: STICKY_AUTH_URL
              value: ${STICKY_AUTH_URL}
            - name: AUTH_URL
              value: ${AUTH_URL}
            - name: INFO_URL
              value: ${INFO_URL}
            - name: DAF_CREDENTIALS
              value: /home/nginx/.cloudvolume/secrets/${CAVE_SECRET_FILENAME}
          resources:
            requests:
              memory: 950Mi
              cpu: 200m
          readinessProbe:
            httpGet:
              path: /health
              port: 80
            initialDelaySeconds: 5
            timeoutSeconds: 1
            periodSeconds: 60
          livenessProbe:
            httpGet:
              path: /health
              port: 80
            initialDelaySeconds: 15
            timeoutSeconds: 1
            periodSeconds: 60
        - name: cloudsql-proxy
          image: gcr.io/cloudsql-docker/gce-proxy:1.33.6
          command:
            [
              "/cloud_sql_proxy",
              "-instances=${PROJECT_NAME}:${REGION}:${SQL_INSTANCE_NAME}=tcp:3306",
              "-credential_file=/secrets/cloudsql/${GOOGLE_SECRET_FILENAME}",
            ]
          resources:
            requests:
              memory: 8Mi
              cpu: 10m
          securityContext:
            runAsUser: 2 # non-root user
            allowPrivilegeEscalation: false
          volumeMounts:
            - name: cloudsql-instance-credentials-volume
              mountPath: /secrets/cloudsql
              readOnly: true
        - name: sysctl-buddy
          image: alpine:3.4
          command:
            - /bin/sh
            - -c
            - |
              while true; do
                sysctl -w net.core.somaxconn=32768
                sysctl -w net.ipv4.ip_local_port_range='1024 65535'
                sleep 10
              done
          imagePullPolicy: IfNotPresent
          securityContext:
            privileged: true
          resources:
            requests:
              memory: 10Mi
              cpu: 5m
